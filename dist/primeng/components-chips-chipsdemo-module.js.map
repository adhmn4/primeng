{"version":3,"sources":["webpack:///./src/app/components/button/button.ts","webpack:///./src/app/components/chips/chips.ts","webpack:///./src/app/components/inputtext/inputtext.ts","webpack:///./src/app/showcase/components/chips/chipsdemo-routing.module.ts","webpack:///./src/app/showcase/components/chips/chipsdemo.html","webpack:///./src/app/showcase/components/chips/chipsdemo.module.ts","webpack:///./src/app/showcase/components/chips/chipsdemo.ts"],"names":[],"mappings":"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","file":"components-chips-chipsdemo-module.js","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,HostBinding,HostListener,Input} from '@angular/core';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pButton]',\r\n    providers: [DomHandler]\r\n})\r\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() iconPos: string = 'left';\r\n    \r\n    @Input() cornerStyleClass: string = 'ui-corner-all';\r\n        \r\n    public _label: string;\r\n    \r\n    public _icon: string;\r\n            \r\n    public initialized: boolean;\r\n\r\n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\r\n    \r\n    ngAfterViewInit() {\r\n        this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\r\n        if(this.icon) {\r\n            let iconElement = document.createElement(\"span\");\r\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            iconElement.className = iconPosClass  + ' ui-clickable fa fa-fw ' + this.icon;\r\n            this.el.nativeElement.appendChild(iconElement);\r\n        }\r\n        \r\n        let labelElement = document.createElement(\"span\");\r\n        labelElement.className = 'ui-button-text ui-clickable';\r\n        labelElement.appendChild(document.createTextNode(this.label||'ui-btn'));\r\n        this.el.nativeElement.appendChild(labelElement);\r\n        this.initialized = true;\r\n    }\r\n        \r\n    getStyleClass(): string {\r\n        let styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\r\n        if(this.icon) {\r\n            if(this.label != null && this.label != undefined) {\r\n                if(this.iconPos == 'left')\r\n                    styleClass = styleClass + ' ui-button-text-icon-left';\r\n                else\r\n                    styleClass = styleClass + ' ui-button-text-icon-right';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-icon-only';\r\n            }\r\n        }\r\n        else {\r\n            if(this.label) {\r\n                styleClass = styleClass + ' ui-button-text-only';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-text-empty';\r\n            }\r\n        }\r\n        \r\n        return styleClass;\r\n    }\r\n    \r\n    @Input() get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    set label(val: string) {\r\n        this._label = val;\r\n        \r\n        if(this.initialized) {\r\n            this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;\r\n\r\n            if(!this.icon) {\r\n                if (this._label) {\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n                else {\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    @Input() get icon(): string {\r\n        return this._icon;\r\n    }\r\n\r\n    set icon(val: string) {\r\n        this._icon = val;\r\n        \r\n        if(this.initialized) {\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            this.domHandler.findSingle(this.el.nativeElement, '.fa').className =\r\n                iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;\r\n        }\r\n    }\r\n        \r\n    ngOnDestroy() {\r\n        while(this.el.nativeElement.hasChildNodes()) {\r\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\r\n        }\r\n        \r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-button',\r\n    template: `\r\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [style]=\"style\" [disabled]=\"disabled\"\r\n            [ngClass]=\"{'ui-button ui-widget ui-state-default ui-corner-all':true,\r\n                        'ui-button-icon-only': (icon && !label),\r\n                        'ui-button-text-icon-left': (icon && label && iconPos === 'left'),\r\n                        'ui-button-text-icon-right': (icon && label && iconPos === 'right'),\r\n                        'ui-button-text-only': (!icon && label),\r\n                        'ui-button-text-empty': (!icon && !label),\r\n                        'ui-state-disabled': disabled}\"\r\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\">\r\n            <ng-content></ng-content>\r\n            <span [ngClass]=\"{'ui-clickable': true,\r\n                        'ui-button-icon-left': (iconPos === 'left'), \r\n                        'ui-button-icon-right': (iconPos === 'right')}\"\r\n                        [class]=\"icon\" *ngIf=\"icon\"></span>\r\n            <span class=\"ui-button-text ui-clickable\">{{label||'ui-btn'}}</span>\r\n        </button>\r\n    `\r\n})\r\nexport class Button {\r\n\r\n    @Input() type: string = 'button';\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Input() icon: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ButtonDirective,Button],\r\n    declarations: [ButtonDirective,Button]\r\n})\r\nexport class ButtonModule { }\r\n","import {NgModule,Component,ElementRef,Input,Output,EventEmitter,AfterContentInit,ContentChildren,QueryList,TemplateRef,IterableDiffers,forwardRef,ViewChild} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {SharedModule,PrimeTemplate} from '../common/shared';\r\nimport {InputTextModule} from '../inputtext/inputtext';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\r\n\r\nexport const CHIPS_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Chips),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'p-chips',\r\n    template: `\r\n        <div [ngClass]=\"'ui-chips ui-widget'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onClick($event)\">\r\n            <ul [ngClass]=\"{'ui-inputtext ui-state-default ui-corner-all':true,'ui-state-focus':focus,'ui-state-disabled':disabled}\">\r\n                <li #token *ngFor=\"let item of value; let i = index;\" class=\"ui-chips-token ui-state-highlight ui-corner-all\">\r\n                    <span *ngIf=\"!disabled\" class=\"ui-chips-token-icon fa fa-fw fa-close\" (click)=\"removeItem($event,i)\"></span>\r\n                    <span *ngIf=\"!itemTemplate\" class=\"ui-chips-token-label\">{{field ? resolveFieldData(item,field) : item}}</span>\r\n                    <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item}\"></ng-container>\r\n                </li>\r\n                <li class=\"ui-chips-input-token\">\r\n                    <input #inputtext type=\"text\" [attr.id]=\"inputId\" [attr.placeholder]=\"(value && value.length ? null : placeholder)\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" \r\n                        (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\">\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    `,\r\n    providers: [DomHandler,CHIPS_VALUE_ACCESSOR]\r\n})\r\nexport class Chips implements AfterContentInit,ControlValueAccessor {\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n    \r\n    @Input() disabled: boolean;\r\n\r\n    @Output() onAdd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onRemove: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Input() field: string;\r\n    \r\n    @Input() placeholder: string;\r\n    \r\n    @Input() max: number;\r\n\r\n    @Input() tabindex: number;\r\n\r\n    @Input() inputId: string;\r\n    \r\n    @Input() allowDuplicate: boolean = true;\r\n    \r\n    @Input() inputStyle: any;\r\n    \r\n    @Input() inputStyleClass: any;\r\n    \r\n    @Input() addOnTab: boolean;\r\n\r\n    @Input() addOnBlur: boolean;\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n    @ViewChild('inputtext') inputViewChild: ElementRef;\r\n    \r\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\r\n    \r\n    public itemTemplate: TemplateRef<any>;\r\n        \r\n    value: any;\r\n    \r\n    onModelChange: Function = () => {};\r\n    \r\n    onModelTouched: Function = () => {};\r\n        \r\n    valueChanged: boolean;\r\n    \r\n    focus: boolean;\r\n            \r\n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\r\n    \r\n    ngAfterContentInit() {\r\n        this.templates.forEach((item) => {\r\n            switch(item.getType()) {\r\n                case 'item':\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n                \r\n                default:\r\n                    this.itemTemplate = item.template;\r\n                break;\r\n            }\r\n        });\r\n    }\r\n    \r\n    onClick(event) {\r\n        this.inputViewChild.nativeElement.focus();\r\n    }\r\n\r\n    writeValue(value: any) : void {\r\n        this.value = value;\r\n        this.updateMaxedOut();\r\n    }\r\n    \r\n    registerOnChange(fn: Function): void {\r\n        this.onModelChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: Function): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    \r\n    setDisabledState(val: boolean): void {\r\n        this.disabled = val;\r\n    }\r\n    \r\n    resolveFieldData(data: any, field: string): any {\r\n        if(data && field) {\r\n            if(field.indexOf('.') == -1) {\r\n                return data[field];\r\n            }\r\n            else {\r\n                let fields: string[] = field.split('.');\r\n                let value = data;\r\n                for(var i = 0, len = fields.length; i < len; ++i) {\r\n                    value = value[fields[i]];\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    \r\n    onInputFocus(event: FocusEvent) {\r\n        this.focus = true;\r\n        this.onFocus.emit(event);\r\n    }\r\n\r\n    onInputBlur(event: FocusEvent) {\r\n        this.focus = false;\r\n        if(this.addOnBlur && this.inputViewChild.nativeElement.value) {\r\n            this.addItem(event, this.inputViewChild.nativeElement.value);\r\n            this.inputViewChild.nativeElement.value = '';\r\n        }\r\n        this.onModelTouched();\r\n        this.onBlur.emit(event);\r\n    }\r\n    \r\n    removeItem(event: Event, index: number): void {\r\n        if(this.disabled) {\r\n            return;\r\n        }\r\n        \r\n        let removedItem = this.value[index];\r\n        this.value = this.value.filter((val, i) => i!=index);\r\n        this.onModelChange(this.value);\r\n        this.onRemove.emit({\r\n            originalEvent: event,\r\n            value: removedItem\r\n        });\r\n        this.updateMaxedOut();\r\n    }\r\n    \r\n    addItem(event: Event, item: string): void {\r\n        this.value = this.value||[];\r\n        if(item && item.trim().length) {\r\n            if(this.allowDuplicate || this.value.indexOf(item) === -1) {\r\n                this.value = [...this.value, item];\r\n                this.onModelChange(this.value);\r\n                this.onAdd.emit({\r\n                    originalEvent: event,\r\n                    value: item\r\n                });\r\n            }\r\n        }\r\n        this.updateMaxedOut();\r\n    }\r\n    \r\n    onKeydown(event: KeyboardEvent): void {\r\n        switch(event.which) {\r\n            //backspace\r\n            case 8:\r\n                if(this.inputViewChild.nativeElement.value.length === 0 && this.value && this.value.length > 0) {\r\n                    this.value = [...this.value];\r\n                    let removedItem = this.value.pop();\r\n                    this.onModelChange(this.value);\r\n                    this.onRemove.emit({\r\n                        originalEvent: event,\r\n                        value: removedItem\r\n                    });\r\n                }\r\n            break;\r\n            \r\n            //enter\r\n            case 13:\r\n                this.addItem(event, this.inputViewChild.nativeElement.value);\r\n                this.inputViewChild.nativeElement.value = '';\r\n                \r\n                event.preventDefault();\r\n            break;\r\n            \r\n            case 9:\r\n                if(this.addOnTab && this.inputViewChild.nativeElement.value !== '') {\r\n                    this.addItem(event, this.inputViewChild.nativeElement.value);\r\n                    this.inputViewChild.nativeElement.value = '';\r\n\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n            \r\n            default:\r\n                if(this.max && this.value && this.max === this.value.length) {\r\n                    event.preventDefault();\r\n                }\r\n            break;\r\n        }\r\n    }\r\n    \r\n    updateMaxedOut() {\r\n        if(this.inputViewChild && this.inputViewChild.nativeElement) {\r\n            if(this.max && this.value && this.max === this.value.length)\r\n                this.inputViewChild.nativeElement.disabled = true;\r\n            else\r\n            this.inputViewChild.nativeElement.disabled = false;\r\n        }\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule,InputTextModule,SharedModule],\r\n    exports: [Chips,InputTextModule,SharedModule],\r\n    declarations: [Chips]\r\n})\r\nexport class ChipsModule { }\r\n","import {NgModule,Directive,ElementRef,HostListener,Input,DoCheck,Optional} from '@angular/core';\r\nimport {NgModel} from '@angular/forms';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pInputText]',\r\n    host: {\r\n        '[class.ui-inputtext]': 'true',\r\n        '[class.ui-corner-all]': 'true',\r\n        '[class.ui-state-default]': 'true',\r\n        '[class.ui-widget]': 'true',\r\n        '[class.ui-state-filled]': 'filled'\r\n    }\r\n})\r\nexport class InputText implements DoCheck {\r\n\r\n    filled: boolean;\r\n\r\n    constructor(public el: ElementRef, @Optional() public ngModel: NgModel) {}\r\n        \r\n    ngDoCheck() {\r\n        this.updateFilledState();\r\n    }\r\n    \r\n    //To trigger change detection to manage ui-state-filled for material labels when there is no value binding\r\n    @HostListener('input', ['$event']) \r\n    onInput(e) {\r\n        this.updateFilledState();\r\n    }\r\n    \r\n    updateFilledState() {\r\n        this.filled = (this.el.nativeElement.value && this.el.nativeElement.value.length) ||\r\n                        (this.ngModel && this.ngModel.model);\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [InputText],\r\n    declarations: [InputText]\r\n})\r\nexport class InputTextModule { }","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {ChipsDemo} from './chipsdemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: ChipsDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class ChipsDemoRoutingModule {}\r\n","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">Chips</span>\\r\\n        <span>Chips is used to enter multiple values on an inputfield.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p-chips [(ngModel)]=\\\"values1\\\"></p-chips>\\r\\n    \\r\\n    <h3>Template</h3>\\r\\n    <p-chips [(ngModel)]=\\\"values2\\\">\\r\\n        <ng-template let-item pTemplate=\\\"item\\\">\\r\\n            {{item}} - (active) <i class=\\\"fa fa-user\\\" style=\\\"margin-right:2em\\\"></i>\\r\\n        </ng-template>\\r\\n    </p-chips>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;ChipsModule&#125; from 'primeng/chips';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>Chips requires an array as its model.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-chips [(ngModel)]=\\\"values\\\"&gt;&lt;/p-chips&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class MyModel &#123;\\r\\n\\r\\n    values: string[];\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>Chips can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-chips formControlName=\\\"cities\\\"&gt;&lt;/p-chips&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Custom Content</h3>\\r\\n            <p>A chip is customized using a ng-template element where the value is passed as the implicit variable.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-chips [(ngModel)]=\\\"values\\\"&gt;\\r\\n    &lt;ng-template let-item pTemplate=\\\"item\\\"&gt;\\r\\n        &#123;&#123;item&#125;&#125; - (active) &lt;i class=\\\"fa fa-user\\\"&gt;&lt;/i&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-chips&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Type</th>\\r\\n                        <th>Default</th>\\r\\n                        <th>Description</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>field</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Name of the property to display on a chip.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>max</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Maximum number of entries allowed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the element should be disabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>placeholder</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Advisory information to display on input.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tabindex</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Index of the element in tabbing order.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>allowDuplicate</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Whether to allow duplicate values or not.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyle</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>addOnTab</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to add an item on tab key press.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>addOnBlur</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Whether to add an item when the input loses focus.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <th>Name</th>\\r\\n                        <th>Parameters</th>\\r\\n                        <th>Description</th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onAdd</td>\\r\\n                            <td>originalEvent: Browser event <br >\\r\\n                                value: Added item value\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a value is added.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onRemove</td>\\r\\n                            <td>originalEvent: Browser event <br >\\r\\n                                value: Added item value\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a value is removed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onFocus</td>\\r\\n                            <td>originalEvent: Browser event</td>\\r\\n                            <td>Callback to invoke when a input is focused.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onBlur</td>\\r\\n                            <td>originalEvent: Browser event</td>\\r\\n                            <td>Callback to invoke when a input loses focus.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-chips</td>\\r\\n                            <td>Container element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-chips-token</td>\\r\\n                            <td>Chip element container.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-chips-token-icon</td>\\r\\n                            <td>Icon of a chip.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-chips-token-label</td>\\r\\n                            <td>Label of a chip.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-chips-input-token</td>\\r\\n                            <td>Container of input element.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/chips\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p-chips [(ngModel)]=\\\"values1\\\" &gt;&lt;/p-chips&gt;\\r\\n\\r\\n&lt;h3&gt;ng-template&lt;/h3&gt;\\r\\n&lt;p-chips [(ngModel)]=\\\"values2\\\"&gt;\\r\\n    &lt;ng-template let-item pTemplate=\\\"item\\\"&gt;\\r\\n        &#123;&#123;item&#125;&#125; - (active) &lt;i class=\\\"fa fa-user\\\" style=\\\"margin-right:2em\\\"&gt;&lt;/i&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-chips&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class ChipsDemo &#123;\\r\\n\\r\\n    values1: string[];\\r\\n    \\r\\n    values2: string[];\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}    from '@angular/forms';\r\nimport {ChipsDemo} from './chipsdemo';\r\nimport {ChipsDemoRoutingModule} from './chipsdemo-routing.module';\r\nimport {ChipsModule} from '../../../components/chips/chips';\r\nimport {ButtonModule} from '../../../components/button/button';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tChipsDemoRoutingModule,\r\n        ChipsModule,\r\n        ButtonModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tChipsDemo\r\n\t]\r\n})\r\nexport class ChipsDemoModule {}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    templateUrl: './chipsdemo.html'\r\n})\r\nexport class ChipsDemo {\r\n\r\n    values1: string[];\r\n    \r\n    values2: string[];\r\n}"],"sourceRoot":""}