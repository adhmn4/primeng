{"version":3,"sources":["webpack:///./src/app/components/button/button.ts","webpack:///./src/app/components/utils/objectutils.ts","webpack:///./src/app/showcase/components/autocomplete/autocompletedemo-routing.module.ts","webpack:///./src/app/showcase/components/autocomplete/autocompletedemo.html","webpack:///./src/app/showcase/components/autocomplete/autocompletedemo.module.ts","webpack:///./src/app/showcase/components/autocomplete/autocompletedemo.ts"],"names":[],"mappings":"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","file":"components-autocomplete-autocompletedemo-module.js","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,HostBinding,HostListener,Input} from '@angular/core';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pButton]',\r\n    providers: [DomHandler]\r\n})\r\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() iconPos: string = 'left';\r\n    \r\n    @Input() cornerStyleClass: string = 'ui-corner-all';\r\n        \r\n    public _label: string;\r\n    \r\n    public _icon: string;\r\n            \r\n    public initialized: boolean;\r\n\r\n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\r\n    \r\n    ngAfterViewInit() {\r\n        this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\r\n        if(this.icon) {\r\n            let iconElement = document.createElement(\"span\");\r\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            iconElement.className = iconPosClass  + ' ui-clickable fa fa-fw ' + this.icon;\r\n            this.el.nativeElement.appendChild(iconElement);\r\n        }\r\n        \r\n        let labelElement = document.createElement(\"span\");\r\n        labelElement.className = 'ui-button-text ui-clickable';\r\n        labelElement.appendChild(document.createTextNode(this.label||'ui-btn'));\r\n        this.el.nativeElement.appendChild(labelElement);\r\n        this.initialized = true;\r\n    }\r\n        \r\n    getStyleClass(): string {\r\n        let styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\r\n        if(this.icon) {\r\n            if(this.label != null && this.label != undefined) {\r\n                if(this.iconPos == 'left')\r\n                    styleClass = styleClass + ' ui-button-text-icon-left';\r\n                else\r\n                    styleClass = styleClass + ' ui-button-text-icon-right';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-icon-only';\r\n            }\r\n        }\r\n        else {\r\n            if(this.label) {\r\n                styleClass = styleClass + ' ui-button-text-only';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-text-empty';\r\n            }\r\n        }\r\n        \r\n        return styleClass;\r\n    }\r\n    \r\n    @Input() get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    set label(val: string) {\r\n        this._label = val;\r\n        \r\n        if(this.initialized) {\r\n            this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;\r\n\r\n            if(!this.icon) {\r\n                if (this._label) {\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n                else {\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    @Input() get icon(): string {\r\n        return this._icon;\r\n    }\r\n\r\n    set icon(val: string) {\r\n        this._icon = val;\r\n        \r\n        if(this.initialized) {\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            this.domHandler.findSingle(this.el.nativeElement, '.fa').className =\r\n                iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;\r\n        }\r\n    }\r\n        \r\n    ngOnDestroy() {\r\n        while(this.el.nativeElement.hasChildNodes()) {\r\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\r\n        }\r\n        \r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-button',\r\n    template: `\r\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [style]=\"style\" [disabled]=\"disabled\"\r\n            [ngClass]=\"{'ui-button ui-widget ui-state-default ui-corner-all':true,\r\n                        'ui-button-icon-only': (icon && !label),\r\n                        'ui-button-text-icon-left': (icon && label && iconPos === 'left'),\r\n                        'ui-button-text-icon-right': (icon && label && iconPos === 'right'),\r\n                        'ui-button-text-only': (!icon && label),\r\n                        'ui-button-text-empty': (!icon && !label),\r\n                        'ui-state-disabled': disabled}\"\r\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\">\r\n            <ng-content></ng-content>\r\n            <span [ngClass]=\"{'ui-clickable': true,\r\n                        'ui-button-icon-left': (iconPos === 'left'), \r\n                        'ui-button-icon-right': (iconPos === 'right')}\"\r\n                        [class]=\"icon\" *ngIf=\"icon\"></span>\r\n            <span class=\"ui-button-text ui-clickable\">{{label||'ui-btn'}}</span>\r\n        </button>\r\n    `\r\n})\r\nexport class Button {\r\n\r\n    @Input() type: string = 'button';\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Input() icon: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ButtonDirective,Button],\r\n    declarations: [ButtonDirective,Button]\r\n})\r\nexport class ButtonModule { }\r\n","import {Injectable} from '@angular/core';\r\nimport {SelectItem} from '../common/selectitem';\r\n\r\n@Injectable()\r\nexport class ObjectUtils {\r\n\r\n    public equals(obj1: any, obj2: any, field?: string): boolean {\r\n        if (field)\r\n            return (this.resolveFieldData(obj1, field) === this.resolveFieldData(obj2, field));\r\n        else\r\n            return this.equalsByValue(obj1, obj2);\r\n    }\r\n\r\n    public equalsByValue(obj1: any, obj2: any, visited?: any[]): boolean {\r\n        if (obj1 == null && obj2 == null) {\r\n            return true;\r\n        }\r\n        if (obj1 == null || obj2 == null) {\r\n            return false;\r\n        }\r\n\r\n        if (obj1 == obj2) {\r\n            return true;\r\n        }\r\n\r\n        if (typeof obj1 == 'object' && typeof obj2 == 'object') {\r\n            if (visited) {\r\n                if (visited.indexOf(obj1) !== -1) return false;\r\n            } else {\r\n                visited = [];\r\n            }\r\n            visited.push(obj1);\r\n\r\n            for (var p in obj1) {\r\n                if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {\r\n                    return false;\r\n                }\r\n\r\n                switch (typeof (obj1[p])) {\r\n                    case 'object':\r\n                        if (!this.equalsByValue(obj1[p], obj2[p], visited)) return false;\r\n                        break;\r\n\r\n                    case 'function':\r\n                        if (typeof (obj2[p]) == 'undefined' || (p != 'compare' && obj1[p].toString() != obj2[p].toString())) return false;\r\n                        break;\r\n\r\n                    default:\r\n                        if (obj1[p] != obj2[p]) return false;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            for (var p in obj2) {\r\n                if (typeof (obj1[p]) == 'undefined') return false;\r\n            }\r\n\r\n            delete obj1._$visited;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    resolveFieldData(data: any, field: string): any {\r\n        if(data && field) {\r\n            if(field.indexOf('.') == -1) {\r\n                return data[field];\r\n            }\r\n            else {\r\n                let fields: string[] = field.split('.');\r\n                let value = data;\r\n                for(var i = 0, len = fields.length; i < len; ++i) {\r\n                    if (value == null) {\r\n                        return null;\r\n                    }\r\n                    value = value[fields[i]];\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    filter(value: any[], fields: any[], filterValue: string) {\r\n        let filteredItems: any[] = [];\r\n\r\n        if(value) {\r\n            for(let item of value) {\r\n                for(let field of fields) {\r\n                    if(String(this.resolveFieldData(item, field)).toLowerCase().indexOf(filterValue.toLowerCase()) > -1) {\r\n                        filteredItems.push(item);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return filteredItems;\r\n    }\r\n\r\n    reorderArray(value: any[], from: number, to: number) {\r\n        let target: number;\r\n        if(value && (from !== to)) {\r\n            if(to >= value.length) {\r\n                target = to - value.length;\r\n                while((target--) + 1) {\r\n                    value.push(undefined);\r\n                }\r\n            }\r\n            value.splice(to, 0, value.splice(from, 1)[0]);\r\n        }\r\n    }\r\n\r\n    generateSelectItems(val: any[], field: string): SelectItem[] {\r\n        let selectItems: SelectItem[];\r\n        if(val && val.length) {\r\n            selectItems = [];\r\n            for(let item of val) {\r\n                selectItems.push({label: this.resolveFieldData(item, field), value: item});\r\n            }\r\n        }\r\n\r\n        return selectItems;\r\n    }\r\n\r\n    insertIntoOrderedArray(item: any, index: number, arr: any[], sourceArr: any[]): void {\r\n        if(arr.length > 0) {\r\n            let injected = false;\r\n            for(let i = 0; i < arr.length; i++) {\r\n                let currentItemIndex = this.findIndexInList(arr[i], sourceArr);\r\n                if(currentItemIndex > index) {\r\n                    arr.splice(i, 0, item);\r\n                    injected = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if(!injected) {\r\n                arr.push(item);\r\n            }\r\n        }\r\n        else {\r\n            arr.push(item);\r\n        }\r\n    }\r\n\r\n    findIndexInList(item: any, list: any): number {\r\n        let index: number = -1;\r\n\r\n        if(list) {\r\n            for(let i = 0; i < list.length; i++) {\r\n                if(list[i] == item) {\r\n                    index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index;\r\n    }\r\n}\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {AutoCompleteDemo} from './autocompletedemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: AutoCompleteDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class AutoCompleteDemoRoutingModule {}\r\n","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">AutoComplete</span>\\r\\n        <span>AutoComplete is an input component that provides real-time suggestions when being typed.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p-autoComplete [(ngModel)]=\\\"country\\\" [suggestions]=\\\"filteredCountriesSingle\\\" (completeMethod)=\\\"filterCountrySingle($event)\\\" field=\\\"name\\\" [size]=\\\"30\\\"\\r\\n        placeholder=\\\"Countries\\\" [minLength]=\\\"1\\\"></p-autoComplete>\\r\\n    <span style=\\\"margin-left:10px\\\">Country: {{country ? country.name||country : 'none'}}</span>\\r\\n\\r\\n    <h3>Advanced</h3>\\r\\n    <p-autoComplete [(ngModel)]=\\\"brand\\\" [suggestions]=\\\"filteredBrands\\\" (completeMethod)=\\\"filterBrands($event)\\\" [size]=\\\"30\\\"\\r\\n        [minLength]=\\\"1\\\" placeholder=\\\"Hint: type 'v' or 'f'\\\" [dropdown]=\\\"true\\\">\\r\\n        <ng-template let-brand pTemplate=\\\"item\\\">\\r\\n            <div class=\\\"ui-helper-clearfix\\\" style=\\\"border-bottom:1px solid #D5D5D5\\\">\\r\\n                <img src=\\\"assets/showcase/images/demo/car/{{brand}}.png\\\" style=\\\"width:32px;display:inline-block;margin:5px 0 2px 5px\\\"/>\\r\\n                <div style=\\\"font-size:18px;float:right;margin:10px 10px 0 0\\\">{{brand}}</div>\\r\\n            </div>\\r\\n        </ng-template>\\r\\n    </p-autoComplete>\\r\\n    <span style=\\\"margin-left:50px\\\">Brand: {{brand||'none'}}</span>\\r\\n\\r\\n    <h3>Multiple</h3>\\r\\n    <span class=\\\"ui-fluid\\\">\\r\\n        <p-autoComplete [(ngModel)]=\\\"countries\\\" [suggestions]=\\\"filteredCountriesMultiple\\\" (completeMethod)=\\\"filterCountryMultiple($event)\\\" styleClass=\\\"wid100\\\"\\r\\n            [minLength]=\\\"1\\\" placeholder=\\\"Countries\\\" field=\\\"name\\\" [multiple]=\\\"true\\\">\\r\\n        </p-autoComplete>\\r\\n    </span>\\r\\n    <ul>\\r\\n        <li *ngFor=\\\"let c of countries\\\">{{c.name}}</li>\\r\\n    </ul>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;AutoCompleteModule&#125; from 'primeng/autocomplete';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>AutoComplete uses ngModel for two-way binding, requires a list of suggestions and a completeMethod to query for the results. The completeMethod\\r\\n            gets the query text as event.query property and should update the suggestions with the search results.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"text\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class AutoCompleteDemo &#123;\\r\\n\\r\\n    text: string;\\r\\n\\r\\n    results: string[];\\r\\n\\r\\n    search(event) &#123;\\r\\n        this.mylookupservice.getResults(event.query).then(data => &#123;\\r\\n            this.results = data;\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Change Detection</h3>\\r\\n            <p>AutoComplete either uses setter based checking or ngDoCheck to realize if the suggestions has changed to update the UI. This is configured using the immutable\\r\\n                property, when enabled (default) setter based detection is utilized so your changes such as adding or removing a record\\r\\n                should always create a new array reference instead of manipulating an existing array as Angular does not trigger setters if the reference does not change.\\r\\n                For example, use slice instead of splice when removing an item or use spread operator instead of push method when adding an item. On the other hand, setting immutable property to false removes\\r\\n                this restriction by using ngDoCheck with IterableDiffers to listen changes without the need to create a new reference of data. Setter based method is faster however\\r\\n                both methods can be used depending on your preference.\\r\\n            </p>\\r\\n\\r\\n            <p>Note that if no suggestions are available after searching, provide an empty array instead of a null value.</p>\\r\\n\\r\\n            <h3>Model Driven Forms</h3>\\r\\n            <p>AutoComplete can be used in a model driven form as well.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete formControlName=\\\"city\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Dropdown</h3>\\r\\n            <p>Enabling dropdown property displays a button next to the input field where click behavior of the button is defined using dropdownMode\\r\\n                property that takes \\\"blank\\\" or \\\"current\\\" as possible values. \\\"blank\\\" is the default mode to send a query with an empty string\\r\\n                whereas \\\"current\\\" setting sends a query with the current value of the input.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"text\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\"\\r\\n            [dropdown]=\\\"true\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class AutoCompleteDemo &#123;\\r\\n\\r\\n    text: string;\\r\\n\\r\\n    results: string[];\\r\\n\\r\\n    search(event) &#123;\\r\\n        this.mylookupservice.getResults(event.query).then(data => &#123;\\r\\n            this.results = data;\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    handleDropdown(event) &#123;\\r\\n        //event.query = current value in input field\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Multiple Selection</h3>\\r\\n            <p>Multiple mode is used to select more than one value from the autocomplete. In this case, model reference should be an array.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"texts\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\" [multiple]=\\\"true\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class AutoCompleteDemo &#123;\\r\\n\\r\\n    texts: string[];\\r\\n\\r\\n    results: string[];\\r\\n\\r\\n    search(event) &#123;\\r\\n        this.mylookupservice.getResults(event.query).then(data => &#123;\\r\\n            this.results = data;\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Objects</h3>\\r\\n            <p>AutoComplete can also work with objects using the field property that defines the label to display as a suggestion. The value passed to the model would still be the\\r\\n            object instance of a suggestion. Here is an example with a Country object that has name and code fields such as &#123;name:\\\"United States\\\",code:\\\"USA\\\"&#125;.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"val\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\" field=\\\"name\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class AutoCompleteDemo &#123;\\r\\n\\r\\n    val: country;\\r\\n\\r\\n    results: country[];\\r\\n\\r\\n    search(event) &#123;\\r\\n        this.countrylookupservice.getResults(event.query).then(data => &#123;\\r\\n            this.results = data;\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Force Selection</h3>\\r\\n            <p>ForceSelection mode validates the manual input to check whether it also exists in the suggestions list, if not the input value is cleared\\r\\n            to make sure the value passed to the model is always one of the suggestions.</p>\\r\\n            <pre>\\r\\n            <code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"val\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\" [forceSelection]=\\\"true\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n            </code>\\r\\n            </pre>\\r\\n\\r\\n            <h3>Templating</h3>\\r\\n            <p>Item ng-template allows displaying custom content inside the suggestions panel. The local ng-template variable passed to the ng-template is an object in the suggestions array.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"brand\\\" [suggestions]=\\\"filteredBrands\\\" (completeMethod)=\\\"filterBrands($event)\\\"&gt;\\r\\n    &lt;ng-template let-brand pTemplate=\\\"item\\\"&gt;\\r\\n        &lt;div class=\\\"ui-helper-clearfix\\\" style=\\\"border-bottom:1px solid #D5D5D5\\\"&gt;\\r\\n            &lt;img src=\\\"assets/showcase/images/demo/car/{{brand}}.png\\\" style=\\\"width:32px;display:inline-block;margin:5px 0 2px 5px\\\"/&gt;\\r\\n            &lt;div style=\\\"font-size:18px;float:right;margin:10px 10px 0 0\\\"&gt;&#123;&#123;brand&#125;&#125;&lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <p>In multiple mode, selected item can be customized using selectedItem ng-template. Note that this\\r\\n                template is not supported in single mode.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"texts\\\" [suggestions]=\\\"results\\\" (completeMethod)=\\\"search($event)\\\" [multiple]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template let-value pTemplate=\\\"selectedItem\\\"&gt;\\r\\n        &lt;span style=\\\"font-size:18px\\\"&gt;&gt;&#123;&#123;value&#125;&#125;&lt;&lt;/span&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-autoComplete&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>suggestions</td>\\r\\n                            <td>array</td>\\r\\n                            <td>null</td>\\r\\n                            <td>An array of suggestions to display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>field</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Field of a suggested object to resolve and display.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>scrollHeight</td>\\r\\n                            <td>string</td>\\r\\n                            <td>200px</td>\\r\\n                            <td>Maximum height of the suggestions panel.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>dropdown</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Displays a button next to the input field when enabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>multiple</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>Specifies if multiple values can be selected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>minLength</td>\\r\\n                            <td>number</td>\\r\\n                            <td>1</td>\\r\\n                            <td>Minimum number of characters to initiate a search.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>delay</td>\\r\\n                            <td>number</td>\\r\\n                            <td>300</td>\\r\\n                            <td>Delay between keystrokes to wait before sending a query.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyle</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputStyleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>inputId</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Identifier of the focus input to match a label defined for the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>placeholder</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Hint text for the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>readonly</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the input cannot be typed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>disabled</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that the component should be disabled.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>maxlength</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Maximum number of character allows in the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>size</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Size of the input field.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>appendTo</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Target element to attach the overlay, valid values are \\\"body\\\" or a local ng-template variable of another element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>tabindex</td>\\r\\n                            <td>number</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Index of the element in tabbing order.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>dataKey</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>A property to uniquely identify a value in options.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>autoHighlight</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, highlights the first item in the list by default.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>type</td>\\r\\n                            <td>string</td>\\r\\n                            <td>text</td>\\r\\n                            <td>Type of the input, defaults to \\\"text\\\".</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>emptyMessage</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Message to display when there are no results for a query.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>immutable</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Defines how the suggestions should be manipulated. More information is available at \\\"Change Detection\\\" section above.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>required</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, it specifies that an input field must be filled out before submitting the form.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>forceSelection</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When present, autocomplete clears the manual input if it does not match of the suggestions to force only\\r\\n                                accepting values from the suggestions.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>dropdownMode</td>\\r\\n                            <td>string</td>\\r\\n                            <td>blank</td>\\r\\n                            <td>Specifies the behavior dropdown button. Default \\\"blank\\\" mode\\r\\n                                    sends an empty string and \\\"current\\\" mode sends the input value.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>completeMethod</td>\\r\\n                            <td>\\r\\n                                event.originalEvent: browser event <br>\\r\\n                                event.query: Value to search with\\r\\n                            </td>\\r\\n                            <td>Callback to invoke to search for suggestions.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onFocus</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when autocomplete gets focus.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onBlur</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when autocomplete loses focus.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onKeyUp</td>\\r\\n                            <td>event: Browser event</td>\\r\\n                            <td>Callback to invoke when a user releases a key.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onSelect</td>\\r\\n                            <td>\\r\\n                                value: Selected value\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a suggestion is selected.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onUnselect</td>\\r\\n                            <td>\\r\\n                                value: Unselected value in multiple mode\\r\\n                            </td>\\r\\n                            <td>Callback to invoke when a selected value is removed.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onDropdownClick</td>\\r\\n                            <td>\\r\\n                                event.originalEvent: browser event <br>\\r\\n                                event.query: Current value of the input field\\r\\n                            </td>\\r\\n                            <td>Callback to invoke to when dropdown button is clicked.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onClear</td>\\r\\n                            <td>event: browser event</td>\\r\\n                            <td>Callback to invoke to when inpu field is cleared.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete</td>\\r\\n                            <td>Container element</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-panel</td>\\r\\n                            <td>Overlay panel of suggestions.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-items</td>\\r\\n                            <td>List container of suggestions.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-list-item</td>\\r\\n                            <td>List item of a suggestion.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-token</td>\\r\\n                            <td>Element of a selected item in multiple mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-token-icon</td>\\r\\n                            <td>Close icon element of a selected item in multiple mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-token-label</td>\\r\\n                            <td>Label of a selected item in multiple mode.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-autocomplete-loader</td>\\r\\n                            <td>Loader icon.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/autocomplete\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"country\\\" [suggestions]=\\\"filteredCountriesSingle\\\" (completeMethod)=\\\"filterCountrySingle($event)\\\" field=\\\"name\\\" [size]=\\\"30\\\"\\r\\n    placeholder=\\\"Countries\\\" [minLength]=\\\"1\\\"&gt;&lt;/p-autoComplete&gt;\\r\\n&lt;span style=\\\"margin-left:10px\\\"&gt;Country: {{country ? country.name||country : 'none'}}&lt;/span&gt;\\r\\n\\r\\n&lt;h3&gt;Advanced&lt;/h3&gt;\\r\\n&lt;p-autoComplete [(ngModel)]=\\\"brand\\\" [suggestions]=\\\"filteredBrands\\\" (completeMethod)=\\\"filterBrands($event)\\\" [size]=\\\"30\\\"\\r\\n    [minLength]=\\\"1\\\" placeholder=\\\"Hint: type 'v' or 'f'\\\" [dropdown]=\\\"true\\\"&gt;\\r\\n    &lt;ng-template let-brand pTemplate=\\\"item\\\"&gt;\\r\\n        &lt;div class=\\\"ui-helper-clearfix\\\" style=\\\"border-bottom:1px solid #D5D5D5\\\"&gt;\\r\\n            &lt;img src=\\\"assets/showcase/images/demo/car/{{brand}}.png\\\" style=\\\"width:32px;display:inline-block;margin:5px 0 2px 5px\\\"/&gt;\\r\\n            &lt;div style=\\\"font-size:18px;float:right;margin:10px 10px 0 0\\\"&gt;{{brand}}&lt;/div&gt;\\r\\n        &lt;/div&gt;\\r\\n    &lt;/ng-template&gt;\\r\\n&lt;/p-autoComplete&gt;\\r\\n&lt;span style=\\\"margin-left:50px\\\"&gt;Brand: {{brand||'none'}}&lt;/span&gt;\\r\\n\\r\\n&lt;h3&gt;Multiple&lt;/h3&gt;\\r\\n&lt;span class=\\\"ui-fluid\\\"&gt;\\r\\n    &lt;p-autoComplete [(ngModel)]=\\\"countries\\\" [suggestions]=\\\"filteredCountriesMultiple\\\" (completeMethod)=\\\"filterCountryMultiple($event)\\\" styleClass=\\\"wid100\\\"\\r\\n        [minLength]=\\\"1\\\" placeholder=\\\"Countries\\\" field=\\\"name\\\" [multiple]=\\\"true\\\"&gt;\\r\\n    &lt;/p-autoComplete&gt;\\r\\n&lt;/span&gt;\\r\\n&lt;ul&gt;\\r\\n    &lt;li *ngFor=\\\"let c of countries\\\"&gt;&#123;&#123;c.name&#125;&#125;&lt;/li&gt;\\r\\n&lt;/ul&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class AutoCompleteDemo &#123;\\r\\n\\r\\n    country: any;\\r\\n\\r\\n    countries: any[];\\r\\n\\r\\n    filteredCountriesSingle: any[];\\r\\n\\r\\n    filteredCountriesMultiple: any[];\\r\\n\\r\\n    brands: string[] = ['Audi','BMW','Fiat','Ford','Honda','Jaguar','Mercedes','Renault','Volvo','VW'];\\r\\n\\r\\n    filteredBrands: any[];\\r\\n\\r\\n    brand: string;\\r\\n\\r\\n    constructor(private countryService: CountryService) &#123; &#125;\\r\\n\\r\\n    filterCountrySingle(event) &#123;\\r\\n        let query = event.query;\\r\\n        this.countryService.getCountries().then(countries => &#123;\\r\\n            this.filteredCountriesSingle = this.filterCountry(query, countries);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    filterCountryMultiple(event) &#123;\\r\\n        let query = event.query;\\r\\n        this.countryService.getCountries().then(countries => &#123;\\r\\n            this.filteredCountriesMultiple = this.filterCountry(query, countries);\\r\\n        &#125;);\\r\\n    &#125;\\r\\n\\r\\n    filterCountry(query, countries: any[]):any[] &#123;\\r\\n        //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\\r\\n        let filtered : any[] = [];\\r\\n        for(let i = 0; i < countries.length; i++) &#123;\\r\\n            let country = countries[i];\\r\\n            if(country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) &#123;\\r\\n                filtered.push(country);\\r\\n            &#125;\\r\\n        &#125;\\r\\n        return filtered;\\r\\n    &#125;\\r\\n\\r\\n    filterBrands(event) &#123;\\r\\n        this.filteredBrands = [];\\r\\n        for(let i = 0; i < this.brands.length; i++) &#123;\\r\\n            let brand = this.brands[i];\\r\\n            if(brand.toLowerCase().indexOf(event.query.toLowerCase()) == 0) &#123;\\r\\n                this.filteredBrands.push(brand);\\r\\n            &#125;\\r\\n        &#125;\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\n@Injectable()\\r\\nexport class CountryService &#123;\\r\\n\\r\\n    constructor(private http: Http) &#123;&#125;\\r\\n\\r\\n    getCountries() &#123;\\r\\n        return this.http.get('showcase/resources/data/countries.json')\\r\\n                    .toPromise()\\r\\n                    .then(res => &lt;any[]&gt; res.json().data)\\r\\n                    .then(data => &#123; return data; &#125;);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {FormsModule}    from '@angular/forms'\r\nimport {AutoCompleteDemo} from './autocompletedemo';\r\nimport {AutoCompleteDemoRoutingModule} from './autocompletedemo-routing.module';\r\nimport {AutoCompleteModule} from '../../../components/autocomplete/autocomplete';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n        FormsModule,\r\n\t\tAutoCompleteDemoRoutingModule,\r\n        AutoCompleteModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tAutoCompleteDemo\r\n\t]\r\n})\r\nexport class AutoCompleteDemoModule {}\r\n","import {Component} from '@angular/core';\r\nimport {CountryService} from '../../service/countryservice';\r\n\r\n@Component({\r\n    templateUrl: './autocompletedemo.html'\r\n})\r\nexport class AutoCompleteDemo {\r\n\r\n    country: any;\r\n    \r\n    countries: any[];\r\n        \r\n    filteredCountriesSingle: any[];\r\n    \r\n    filteredCountriesMultiple: any[];\r\n    \r\n    brands: string[] = ['Audi','BMW','Fiat','Ford','Honda','Jaguar','Mercedes','Renault','Volvo','VW'];\r\n    \r\n    filteredBrands: any[];\r\n    \r\n    brand: string;\r\n    \r\n    constructor(private countryService: CountryService) { }\r\n    \r\n    filterCountrySingle(event) {\r\n        let query = event.query;        \r\n        this.countryService.getCountries().then(countries => {\r\n            this.filteredCountriesSingle = this.filterCountry(query, countries);\r\n        });\r\n    }\r\n    \r\n    filterCountryMultiple(event) {\r\n        let query = event.query;\r\n        this.countryService.getCountries().then(countries => {\r\n            this.filteredCountriesMultiple = this.filterCountry(query, countries);\r\n        });\r\n    }\r\n    \r\n    filterCountry(query, countries: any[]):any[] {\r\n        //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\r\n        let filtered : any[] = [];\r\n        for(let i = 0; i < countries.length; i++) {\r\n            let country = countries[i];\r\n            if(country.name.toLowerCase().indexOf(query.toLowerCase()) == 0) {\r\n                filtered.push(country);\r\n            }\r\n        }\r\n        return filtered;\r\n    }\r\n        \r\n    filterBrands(event) {\r\n        this.filteredBrands = [];\r\n        for(let i = 0; i < this.brands.length; i++) {\r\n            let brand = this.brands[i];\r\n            if(brand.toLowerCase().indexOf(event.query.toLowerCase()) == 0) {\r\n                this.filteredBrands.push(brand);\r\n            }\r\n        }\r\n    }\r\n}"],"sourceRoot":""}