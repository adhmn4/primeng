{"version":3,"sources":["webpack:///./src/app/components/button/button.ts","webpack:///./src/app/components/overlaypanel/overlaypanel.ts","webpack:///./src/app/showcase/components/overlaypanel/overlaypaneldemo-routing.module.ts","webpack:///./src/app/showcase/components/overlaypanel/overlaypaneldemo.html","webpack:///./src/app/showcase/components/overlaypanel/overlaypaneldemo.module.ts","webpack:///./src/app/showcase/components/overlaypanel/overlaypaneldemo.ts"],"names":[],"mappings":"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","file":"components-overlaypanel-overlaypaneldemo-module.js","sourcesContent":["import {NgModule,Directive,Component,ElementRef,EventEmitter,AfterViewInit,Output,OnDestroy,HostBinding,HostListener,Input} from '@angular/core';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {CommonModule} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[pButton]',\r\n    providers: [DomHandler]\r\n})\r\nexport class ButtonDirective implements AfterViewInit, OnDestroy {\r\n\r\n    @Input() iconPos: string = 'left';\r\n    \r\n    @Input() cornerStyleClass: string = 'ui-corner-all';\r\n        \r\n    public _label: string;\r\n    \r\n    public _icon: string;\r\n            \r\n    public initialized: boolean;\r\n\r\n    constructor(public el: ElementRef, public domHandler: DomHandler) {}\r\n    \r\n    ngAfterViewInit() {\r\n        this.domHandler.addMultipleClasses(this.el.nativeElement, this.getStyleClass());\r\n        if(this.icon) {\r\n            let iconElement = document.createElement(\"span\");\r\n            iconElement.setAttribute(\"aria-hidden\", \"true\");\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            iconElement.className = iconPosClass  + ' ui-clickable fa fa-fw ' + this.icon;\r\n            this.el.nativeElement.appendChild(iconElement);\r\n        }\r\n        \r\n        let labelElement = document.createElement(\"span\");\r\n        labelElement.className = 'ui-button-text ui-clickable';\r\n        labelElement.appendChild(document.createTextNode(this.label||'ui-btn'));\r\n        this.el.nativeElement.appendChild(labelElement);\r\n        this.initialized = true;\r\n    }\r\n        \r\n    getStyleClass(): string {\r\n        let styleClass = 'ui-button ui-widget ui-state-default ' + this.cornerStyleClass;\r\n        if(this.icon) {\r\n            if(this.label != null && this.label != undefined) {\r\n                if(this.iconPos == 'left')\r\n                    styleClass = styleClass + ' ui-button-text-icon-left';\r\n                else\r\n                    styleClass = styleClass + ' ui-button-text-icon-right';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-icon-only';\r\n            }\r\n        }\r\n        else {\r\n            if(this.label) {\r\n                styleClass = styleClass + ' ui-button-text-only';\r\n            }\r\n            else {\r\n                styleClass = styleClass + ' ui-button-text-empty';\r\n            }\r\n        }\r\n        \r\n        return styleClass;\r\n    }\r\n    \r\n    @Input() get label(): string {\r\n        return this._label;\r\n    }\r\n\r\n    set label(val: string) {\r\n        this._label = val;\r\n        \r\n        if(this.initialized) {\r\n            this.domHandler.findSingle(this.el.nativeElement, '.ui-button-text').textContent = this._label;\r\n\r\n            if(!this.icon) {\r\n                if (this._label) {\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n                else {\r\n                    this.domHandler.addClass(this.el.nativeElement, 'ui-button-text-empty');\r\n                    this.domHandler.removeClass(this.el.nativeElement, 'ui-button-text-only');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    @Input() get icon(): string {\r\n        return this._icon;\r\n    }\r\n\r\n    set icon(val: string) {\r\n        this._icon = val;\r\n        \r\n        if(this.initialized) {\r\n            let iconPosClass = (this.iconPos == 'right') ? 'ui-button-icon-right': 'ui-button-icon-left';\r\n            this.domHandler.findSingle(this.el.nativeElement, '.fa').className =\r\n                iconPosClass + ' ui-clickable fa fa-fw ' + this.icon;\r\n        }\r\n    }\r\n        \r\n    ngOnDestroy() {\r\n        while(this.el.nativeElement.hasChildNodes()) {\r\n            this.el.nativeElement.removeChild(this.el.nativeElement.lastChild);\r\n        }\r\n        \r\n        this.initialized = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'p-button',\r\n    template: `\r\n        <button [attr.type]=\"type\" [class]=\"styleClass\" [style]=\"style\" [disabled]=\"disabled\"\r\n            [ngClass]=\"{'ui-button ui-widget ui-state-default ui-corner-all':true,\r\n                        'ui-button-icon-only': (icon && !label),\r\n                        'ui-button-text-icon-left': (icon && label && iconPos === 'left'),\r\n                        'ui-button-text-icon-right': (icon && label && iconPos === 'right'),\r\n                        'ui-button-text-only': (!icon && label),\r\n                        'ui-button-text-empty': (!icon && !label),\r\n                        'ui-state-disabled': disabled}\"\r\n                        (click)=\"onClick.emit($event)\" (focus)=\"onFocus.emit($event)\" (blur)=\"onBlur.emit($event)\">\r\n            <ng-content></ng-content>\r\n            <span [ngClass]=\"{'ui-clickable': true,\r\n                        'ui-button-icon-left': (iconPos === 'left'), \r\n                        'ui-button-icon-right': (iconPos === 'right')}\"\r\n                        [class]=\"icon\" *ngIf=\"icon\"></span>\r\n            <span class=\"ui-button-text ui-clickable\">{{label||'ui-btn'}}</span>\r\n        </button>\r\n    `\r\n})\r\nexport class Button {\r\n\r\n    @Input() type: string = 'button';\r\n\r\n    @Input() iconPos: string = 'left';\r\n\r\n    @Input() icon: string;\r\n\r\n    @Input() label: string;\r\n\r\n    @Input() disabled: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n\r\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [ButtonDirective,Button],\r\n    declarations: [ButtonDirective,Button]\r\n})\r\nexport class ButtonModule { }\r\n","import {NgModule,Component,Input,Output,AfterViewInit,AfterViewChecked,OnDestroy,EventEmitter,Renderer2,ElementRef,ChangeDetectorRef} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {DomHandler} from '../dom/domhandler';\r\nimport {trigger,state,style,transition,animate} from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'p-overlayPanel',\r\n    template: `\r\n        <div [ngClass]=\"'ui-overlaypanel ui-widget ui-widget-content ui-corner-all ui-shadow'\" [ngStyle]=\"style\" [class]=\"styleClass\"\r\n            [style.display]=\"visible ? 'block' : 'none'\" (click)=\"onPanelClick($event)\" [@panelState]=\"visible ? 'visible' : 'hidden'\">\r\n            <div class=\"ui-overlaypanel-content\">\r\n                <ng-content></ng-content>\r\n            </div>\r\n            <a href=\"#\" *ngIf=\"showCloseIcon\" class=\"ui-overlaypanel-close ui-state-default\" (click)=\"onCloseClick($event)\">\r\n                <span class=\"fa fa-fw fa-close\"></span>\r\n            </a>\r\n        </div>\r\n    `,\r\n    animations: [\r\n        trigger('panelState', [\r\n            state('hidden', style({\r\n                opacity: 0\r\n            })),\r\n            state('visible', style({\r\n                opacity: 1\r\n            })),\r\n            transition('visible => hidden', animate('400ms ease-in')),\r\n            transition('hidden => visible', animate('400ms ease-out'))\r\n        ])\r\n    ],\r\n    providers: [DomHandler]\r\n})\r\nexport class OverlayPanel implements AfterViewInit,AfterViewChecked,OnDestroy {\r\n\r\n    @Input() dismissable: boolean = true;\r\n\r\n    @Input() showCloseIcon: boolean;\r\n\r\n    @Input() style: any;\r\n\r\n    @Input() styleClass: string;\r\n    \r\n    @Input() appendTo: any;\r\n\r\n    @Output() onBeforeShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onAfterShow: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onBeforeHide: EventEmitter<any> = new EventEmitter();\r\n\r\n    @Output() onAfterHide: EventEmitter<any> = new EventEmitter();\r\n    \r\n    container: any;\r\n\r\n    visible: boolean = false;\r\n\r\n    documentClickListener: any;\r\n    \r\n    selfClick: boolean;\r\n        \r\n    target: any;\r\n    \r\n    willHide: boolean;\r\n    \r\n    willShow: boolean;\r\n    \r\n    targetClickEvent: boolean;\r\n    \r\n    closeClick: boolean;\r\n    \r\n    constructor(public el: ElementRef, public domHandler: DomHandler, public renderer: Renderer2, private cd: ChangeDetectorRef) {}\r\n    \r\n    ngAfterViewInit() {\r\n        this.container = this.el.nativeElement.children[0];\r\n        \r\n        if(this.appendTo) {\r\n            if(this.appendTo === 'body')\r\n                document.body.appendChild(this.container);\r\n            else\r\n                this.domHandler.appendChild(this.container, this.appendTo);\r\n        }\r\n    }\r\n    \r\n    ngAfterViewChecked() {\r\n        if(this.willShow) {\r\n            this.domHandler.absolutePosition(this.container, this.target);\r\n            this.bindDocumentClickListener();\r\n            this.onAfterShow.emit(null);\r\n            this.willShow = false;\r\n        }\r\n        \r\n        if(this.willHide) {\r\n            this.onAfterHide.emit(null);\r\n            this.willHide = false;\r\n        }\r\n    }\r\n    \r\n    bindDocumentClickListener() {\r\n        if(!this.documentClickListener && this.dismissable) {\r\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\r\n                if(!this.selfClick && !this.targetClickEvent) {\r\n                    this.hide();\r\n                }\r\n                \r\n                this.selfClick = false;\r\n                this.targetClickEvent = false;\r\n                this.cd.markForCheck();\r\n            });\r\n        }\r\n    }\r\n    \r\n    unbindDocumentClickListener() {\r\n        if(this.documentClickListener) {\r\n            this.documentClickListener();\r\n            this.documentClickListener = null;\r\n        }\r\n    }\r\n    \r\n    toggle(event, target?) {                          \r\n        if(!this.target || this.target === (target||event.currentTarget||event.target)) {\r\n            if(this.visible)\r\n                this.hide();\r\n            else\r\n                this.show(event, target);\r\n        }\r\n        else {\r\n            this.show(event, target);\r\n        }\r\n    }\r\n\r\n    show(event, target?) {\r\n        this.onBeforeShow.emit(null);\r\n        this.target = target||event.currentTarget||event.target;\r\n        this.container.style.zIndex = ++DomHandler.zindex;\r\n\r\n        this.visible = true;\r\n        this.willShow = true;\r\n        \r\n        if(event.type === 'click') {\r\n            this.targetClickEvent = true;\r\n        }\r\n    }\r\n\r\n    hide() {\r\n        if(this.visible) {\r\n            this.onBeforeHide.emit(null);\r\n            this.willHide = true;\r\n            this.visible = false;\r\n            this.selfClick = false;\r\n            this.targetClickEvent = false;\r\n            this.unbindDocumentClickListener();\r\n        }\r\n    }\r\n        \r\n    onPanelClick(event) {\r\n        if(this.closeClick) {\r\n            this.hide();\r\n            this.closeClick = false;\r\n        }\r\n        else if(this.dismissable) {\r\n            this.selfClick = true;\r\n        }\r\n    }\r\n\r\n    onCloseClick(event) {\r\n        this.closeClick = true;\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.unbindDocumentClickListener();\r\n        \r\n        if(this.appendTo) {\r\n            this.el.nativeElement.appendChild(this.container);\r\n        }\r\n        \r\n        this.target = null;\r\n    }\r\n}\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    exports: [OverlayPanel],\r\n    declarations: [OverlayPanel]\r\n})\r\nexport class OverlayPanelModule { }\r\n","import {NgModule}     from '@angular/core';\r\nimport {RouterModule} from '@angular/router'\r\nimport {OverlayPanelDemo} from './overlaypaneldemo';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forChild([\r\n\t\t\t{path:'',component: OverlayPanelDemo}\r\n\t\t])\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\nexport class OverlayPanelDemoRoutingModule {}\r\n","module.exports = \"<div class=\\\"content-section introduction\\\">\\r\\n    <div>\\r\\n        <span class=\\\"feature-title\\\">OverlayPanel</span>\\r\\n        <span>OverlayPanel is a container component that can overlay other components on page.</span>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section implementation\\\">\\r\\n    <h3 class=\\\"first\\\">Basic</h3>\\r\\n    <p>Click the button to show the panel.</p>\\r\\n    <button type=\\\"text\\\" pButton label=\\\"Basic\\\" (click)=\\\"op1.toggle($event)\\\"></button>\\r\\n\\r\\n    <p-overlayPanel #op1>\\r\\n        <img src=\\\"assets/showcase/images/demo/galleria/galleria1.jpg\\\" alt=\\\"Galleria 1\\\" />\\r\\n    </p-overlayPanel>\\r\\n    \\r\\n    <h3>Customized</h3>\\r\\n    <p>This OverlayPanel gets displayed on hover of the icon, is not dismissable and displays a close icon.</p>\\r\\n    <i class=\\\"fa fa-search\\\" (mouseenter)=\\\"op2.show($event)\\\" style=\\\"font-size:24px\\\"></i>\\r\\n    \\r\\n    <p-overlayPanel #op2 [showCloseIcon]=\\\"true\\\" [dismissable]=\\\"false\\\">\\r\\n        <p-dataTable [value]=\\\"cars1\\\" [style]=\\\"&#123;'width':'500px'&#125;\\\">\\r\\n            <p-column field=\\\"vin\\\" header=\\\"Vin\\\" [sortable]=\\\"true\\\"></p-column>\\r\\n            <p-column field=\\\"year\\\" header=\\\"Year\\\" [sortable]=\\\"true\\\"></p-column>\\r\\n            <p-column field=\\\"brand\\\" header=\\\"Brand\\\" [sortable]=\\\"true\\\"></p-column>\\r\\n            <p-column field=\\\"color\\\" header=\\\"Color\\\" [sortable]=\\\"true\\\"></p-column>\\r\\n        </p-dataTable>\\r\\n    </p-overlayPanel>\\r\\n    \\r\\n    <h3>DataTable Integration</h3>\\r\\n    <p-dataTable [value]=\\\"cars2\\\">\\r\\n        <p-column [style]=\\\"&#123;'width':'10%','text-align':'center'&#125;\\\" header=\\\"Logo\\\">\\r\\n            <ng-template let-car=\\\"rowData\\\" pTemplate=\\\"body\\\">\\r\\n                <button type=\\\"button\\\" pButton (click)=\\\"selectCar($event,car,op3);\\\" icon=\\\"fa-search\\\"></button>\\r\\n            </ng-template>\\r\\n        </p-column>\\r\\n        <p-column field=\\\"vin\\\" header=\\\"Vin\\\"></p-column>\\r\\n        <p-column field=\\\"year\\\" header=\\\"Year\\\"></p-column>\\r\\n        <p-column field=\\\"brand\\\" header=\\\"Brand\\\"></p-column>\\r\\n        <p-column field=\\\"color\\\" header=\\\"Color\\\"></p-column>\\r\\n    </p-dataTable>\\r\\n    \\r\\n    <p-overlayPanel #op3>\\r\\n        <img src=\\\"assets/showcase/images/demo/car/{{selectedCar.brand}}.png\\\" *ngIf=\\\"selectedCar\\\"/>\\r\\n    </p-overlayPanel>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"content-section documentation\\\">\\r\\n    <p-tabView effect=\\\"fade\\\">\\r\\n        <p-tabPanel header=\\\"Documentation\\\">\\r\\n            <h3>Import</h3>\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nimport &#123;OverlayPanelModule&#125; from 'primeng/overlaypanel';\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Getting Started</h3>\\r\\n            <p>OverlayPanel is defined using p-overlayPanel element and is displayed using the <i>show</i> or <i>toggle</i> method of a local ng-template variable.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-overlayPanel #op&gt;\\r\\n    Content\\r\\n&lt;/p-overlayPanel&gt;\\r\\n\\r\\n&lt;button type=\\\"text\\\" pButton label=\\\"Basic\\\" (click)=\\\"op.toggle($event)\\\"&gt;&lt;/button&gt;\\r\\n</code>\\r\\n</pre>\\r\\n            <h3>Show and Hide</h3>\\r\\n            <p><i>show</i> method takes two parameters, first one is the event and it is mandatory. By default the target component to align the overlay is the event target, \\r\\n            if you'd like to align it to another element, provide it as the second parameter. Similarly calling <i>hide()</i> hides the overlay panel and the <i>toggle</i> method \\r\\n            toggles the visibility of the panel. In example below, clicking the button displays the overlayPanel aligned to the actualTarget div, not the button itself.</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-overlayPanel #op&gt;\\r\\n    Content\\r\\n&lt;/p-overlayPanel&gt;\\r\\n\\r\\n&lt;button type=\\\"text\\\" pButton label=\\\"Custom Target\\\" (click)=\\\"op.show($event, actualTarget)\\\"&gt;&lt;/button&gt;\\r\\n&lt;div #actualTarget&gt;&lt;/div&gt;\\r\\n</code>\\r\\n</pre>\\r\\n        \\r\\n        \\r\\n            <h3>Dismissable and CloseIcon</h3>\\r\\n            <p>Clicking outside the overlay hides the panel, setting dismissable to false disables this behavior. Additionally enablign showCloseIcon property \\r\\n            displays a close icon at the top right corner to close the panel</p>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;p-overlayPanel #op [dismissable]=\\\"true\\\" [showCloseIcon]=\\\"true\\\"&gt;\\r\\n    Content\\r\\n&lt;/p-overlayPanel&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n            <h3>Properties</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Type</th>\\r\\n                            <th>Default</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>dismissable</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>true</td>\\r\\n                            <td>Enables to hide the overlay when outside is clicked.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>showCloseIcon</td>\\r\\n                            <td>boolean</td>\\r\\n                            <td>false</td>\\r\\n                            <td>When enabled, displays a close icon at top right corner.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>style</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Inline style of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>styleClass</td>\\r\\n                            <td>string</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Style class of the component.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>appendTo</td>\\r\\n                            <td>any</td>\\r\\n                            <td>null</td>\\r\\n                            <td>Target element to attach the panel, valid values are \\\"body\\\" or a local ng-template variable of another element.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Events</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>onBeforeShow</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke before overlay is shown.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onAfterShow</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke after overlay is shown.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onBeforeHide</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke before overlay is hidden.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>onAfterHide</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Callback to invoke after overlay is hidden.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Methods</h3>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Parameters</th>\\r\\n                            <th>Description</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>toggle</td>\\r\\n                            <td>event: browser event <br>\\r\\n                                target?: target element to align the panel, defaults to event.target\\r\\n                            </td>\\r\\n                            <td>Toggles the visibility of the panel.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>show</td>\\r\\n                            <td>event: browser event <br>\\r\\n                                target?: target element to align the panel to\\r\\n                            </td>\\r\\n                            <td>Displays the panel.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>hide</td>\\r\\n                            <td>-</td>\\r\\n                            <td>Hides the panel.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n            \\r\\n            <h3>Styling</h3>\\r\\n            <p>Following is the list of structural style classes, for theming classes visit <a href=\\\"#\\\" [routerLink]=\\\"['/theming']\\\">theming page</a>.</p>\\r\\n            <div class=\\\"doc-tablewrapper\\\">\\r\\n                <table class=\\\"doc-table\\\">\\r\\n                    <thead>\\r\\n                        <tr>\\r\\n                            <th>Name</th>\\r\\n                            <th>Element</th>\\r\\n                        </tr>\\r\\n                    </thead>\\r\\n                    <tbody>\\r\\n                        <tr>\\r\\n                            <td>ui-overlaypanel</td>\\r\\n                            <td>Container element.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-overlaypanel-content</td>\\r\\n                            <td>Content of the panel.</td>\\r\\n                        </tr>\\r\\n                        <tr>\\r\\n                            <td>ui-overlaypanel-close</td>\\r\\n                            <td>Close icon.</td>\\r\\n                        </tr>\\r\\n                    </tbody>\\r\\n                </table>\\r\\n            </div>\\r\\n\\r\\n            <h3>Dependencies</h3>\\r\\n            <p>None.</p>\\r\\n        </p-tabPanel>\\r\\n\\r\\n        <p-tabPanel header=\\\"Source\\\">\\r\\n            <a href=\\\"https://github.com/primefaces/primeng/tree/master/src/app/showcase/components/overlaypanel\\\" class=\\\"btn-viewsource\\\" target=\\\"_blank\\\">\\r\\n                <i class=\\\"fa fa-github\\\"></i>\\r\\n                <span>View on GitHub</span>\\r\\n            </a>\\r\\n<pre>\\r\\n<code class=\\\"language-markup\\\" pCode ngNonBindable>\\r\\n&lt;h3 class=\\\"first\\\"&gt;Basic&lt;/h3&gt;\\r\\n&lt;p&gt;Click the button to show the panel.&lt;/p&gt;\\r\\n&lt;button type=\\\"text\\\" pButton label=\\\"Basic\\\" (click)=\\\"op1.toggle($event)\\\"&gt;&lt;/button&gt;\\r\\n\\r\\n&lt;p-overlayPanel #op1&gt;\\r\\n    &lt;img src=\\\"assets/showcase/images/demo/galleria/galleria1.jpg\\\" alt=\\\"Galleria 1\\\" /&gt;\\r\\n&lt;/p-overlayPanel&gt;\\r\\n\\r\\n&lt;h3&gt;Customized&lt;/h3&gt;\\r\\n&lt;p&gt;This OverlayPanel gets displayed on hover of the icon, is not dismissable and displays a close icon.&lt;/p&gt;\\r\\n&lt;i class=\\\"fa fa-search\\\" (mouseenter)=\\\"op2.show($event)\\\" style=\\\"font-size:24px\\\"&gt;&lt;/i&gt;\\r\\n\\r\\n&lt;p-overlayPanel #op2 [showCloseIcon]=\\\"true\\\" [dismissable]=\\\"false\\\"&gt;\\r\\n    &lt;p-dataTable [value]=\\\"cars1\\\" [style]=\\\"&#123;'width':'500px'&#125;\\\"&gt;\\r\\n        &lt;p-column field=\\\"vin\\\" header=\\\"Vin\\\" [sortable]=\\\"true\\\"&gt;&lt;/p-column&gt;\\r\\n        &lt;p-column field=\\\"year\\\" header=\\\"Year\\\" [sortable]=\\\"true\\\"&gt;&lt;/p-column&gt;\\r\\n        &lt;p-column field=\\\"brand\\\" header=\\\"Brand\\\" [sortable]=\\\"true\\\"&gt;&lt;/p-column&gt;\\r\\n        &lt;p-column field=\\\"color\\\" header=\\\"Color\\\" [sortable]=\\\"true\\\"&gt;&lt;/p-column&gt;\\r\\n    &lt;/p-dataTable&gt;\\r\\n&lt;/p-overlayPanel&gt;\\r\\n\\r\\n&lt;h3&gt;DataTable Integration&lt;/h3&gt;\\r\\n&lt;p-dataTable [value]=\\\"cars2\\\"&gt;\\r\\n    &lt;p-column [style]=\\\"&#123;'width':'10%','text-align':'center'&#125;\\\" header=\\\"Logo\\\"&gt;\\r\\n        &lt;ng-template let-car=\\\"rowData\\\" pTemplate=\\\"body\\\"&gt;\\r\\n            &lt;button type=\\\"button\\\" pButton (click)=\\\"selectCar($event,car,op3);\\\" icon=\\\"fa-search\\\"&gt;&lt;/button&gt;\\r\\n        &lt;/ng-template&gt;\\r\\n    &lt;/p-column&gt;\\r\\n    &lt;p-column field=\\\"vin\\\" header=\\\"Vin\\\"&gt;&lt;/p-column&gt;\\r\\n    &lt;p-column field=\\\"year\\\" header=\\\"Year\\\"&gt;&lt;/p-column&gt;\\r\\n    &lt;p-column field=\\\"brand\\\" header=\\\"Brand\\\"&gt;&lt;/p-column&gt;\\r\\n    &lt;p-column field=\\\"color\\\" header=\\\"Color\\\"&gt;&lt;/p-column&gt;\\r\\n&lt;/p-dataTable&gt;\\r\\n\\r\\n&lt;p-overlayPanel #op3&gt;\\r\\n    &lt;img src=\\\"assets/showcase/images/demo/car/{{selectedCar.brand}}.png\\\" *ngIf=\\\"selectedCar\\\"/&gt;\\r\\n&lt;/p-overlayPanel&gt;\\r\\n</code>\\r\\n</pre>\\r\\n\\r\\n<pre>\\r\\n<code class=\\\"language-typescript\\\" pCode ngNonBindable>\\r\\nexport class OverlayPanelDemo &#123;\\r\\n\\r\\n    cars1: Car[];\\r\\n    \\r\\n    cars2: Car[];\\r\\n    \\r\\n    selectedCar: Car;\\r\\n    \\r\\n    constructor(private carService: CarService) &#123; &#125;\\r\\n\\r\\n    ngOnInit() &#123;\\r\\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\\r\\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\\r\\n    &#125;\\r\\n    \\r\\n    selectCar(event,car: Car, overlaypanel: OverlayPanel) &#123;\\r\\n        this.selectedCar = car;\\r\\n        overlaypanel.toggle(event);\\r\\n    &#125;\\r\\n&#125;\\r\\n</code>\\r\\n</pre>\\r\\n        </p-tabPanel>\\r\\n    </p-tabView>\\r\\n</div>\\r\\n\"","import {NgModule}     from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {OverlayPanelDemo} from './overlaypaneldemo';\r\nimport {OverlayPanelDemoRoutingModule} from './overlaypaneldemo-routing.module';\r\nimport {OverlayPanelModule} from '../../../components/overlaypanel/overlaypanel';\r\nimport {ButtonModule} from '../../../components/button/button';\r\nimport {DataTableModule} from '../../../components/datatable/datatable';\r\nimport {TabViewModule} from '../../../components/tabview/tabview';\r\nimport {CodeHighlighterModule} from '../../../components/codehighlighter/codehighlighter';\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tOverlayPanelDemoRoutingModule,\r\n        OverlayPanelModule,\r\n        ButtonModule,\r\n        DataTableModule,\r\n        TabViewModule,\r\n        CodeHighlighterModule\r\n\t],\r\n\tdeclarations: [\r\n\t\tOverlayPanelDemo\r\n\t]\r\n})\r\nexport class OverlayPanelDemoModule {}\r\n","import {Component} from '@angular/core';\r\nimport {OverlayPanel} from '../../../components/overlaypanel/overlaypanel';\r\nimport {Car} from '../../components/domain/car';\r\nimport {CarService} from '../../service/carservice';\r\n\r\n@Component({\r\n    templateUrl: './overlaypaneldemo.html'\r\n})\r\nexport class OverlayPanelDemo {\r\n\r\n    cars1: Car[];\r\n    \r\n    cars2: Car[];\r\n    \r\n    selectedCar: Car;\r\n    \r\n    constructor(private carService: CarService) { }\r\n\r\n    ngOnInit() {\r\n        this.carService.getCarsSmall().then(cars => this.cars1 = cars);\r\n        this.carService.getCarsSmall().then(cars => this.cars2 = cars);\r\n    }\r\n    \r\n    selectCar(event,car: Car, overlaypanel: OverlayPanel) {\r\n        this.selectedCar = car;\r\n        overlaypanel.toggle(event);\r\n    }\r\n}"],"sourceRoot":""}